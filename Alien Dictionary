public class Solution {
    public String alienOrder(String[] words) {
        Map<Character, Integer> indegree = new HashMap<Character, Integer>();
        Map<Character, Set<Character>> adjacencyMap = new HashMap<Character, Set<Character>>();
        
        for(String s: words){
            for(char c: s.toCharArray()){
                indegree.put(c,0);
            }
        }
        
        for (int i = 0; i < words.length - 1; i++) {
            String word1 = words[i];
            String word2 = words[i + 1];
            
            for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {
                if (word1.charAt(j) == word2.charAt(j)) {
                    if ((j == word2.length() -1) && (j < word1.length() - 1)) {
                        System.out.println(j + " " + word2.length() + " " + word2.length());
                        
                        return "";
                    }
                    continue;
                }
                
                Character outChar = word1.charAt(j);
                Character inChar = word2.charAt(j);
                
                if (!adjacencyMap.containsKey(outChar)) {
                    adjacencyMap.put(outChar, new HashSet<Character>());
                }
                
                if (!adjacencyMap.get(outChar).contains(inChar)) {
                    Set<Character> inCharSet = adjacencyMap.get(outChar);
                    inCharSet.add(inChar);
                    adjacencyMap.put(outChar, inCharSet);
                    
                    System.out.println(inChar + " " + indegree.get(inChar) + " " + j + " " + word1 + " " + word2);
                    indegree.put(inChar, indegree.get(inChar) + 1);
                }
                
                // break!!
                break;
            }
        }
        
        
        Queue<Character> queue = new LinkedList<Character>();
        for (Map.Entry<Character, Integer> entry : indegree.entrySet()) {
            if (entry.getValue() == 0) {
                queue.offer(entry.getKey());
            }
            
        }
        
        StringBuilder result = new StringBuilder();
        while(!queue.isEmpty()) {
            Character currentChar = queue.poll();
            result.append(currentChar);
            
            System.out.println(currentChar);
            
            if (adjacencyMap.containsKey(currentChar)) {   
                for (Character c : adjacencyMap.get(currentChar)) {
                    indegree.put(c, indegree.get(c) - 1);
                    if (indegree.get(c) == 0) {
                        queue.offer(c);
                    } else {
                        System.out.println(c);
                        System.out.println(indegree.get(c));
                    }
                }
            }
        } 
        
        if(result.length()!=indegree.size()) return "";
        
        return result.toString();
    }
}
